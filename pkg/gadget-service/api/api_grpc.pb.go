// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuiltInGadgetManagerClient is the client API for BuiltInGadgetManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuiltInGadgetManagerClient interface {
	GetInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	GetBuiltInGadgetInfo(ctx context.Context, in *GetBuiltInGadgetInfoRequest, opts ...grpc.CallOption) (*GetBuiltInGadgetInfoResponse, error)
	RunBuiltInGadget(ctx context.Context, opts ...grpc.CallOption) (BuiltInGadgetManager_RunBuiltInGadgetClient, error)
}

type builtInGadgetManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBuiltInGadgetManagerClient(cc grpc.ClientConnInterface) BuiltInGadgetManagerClient {
	return &builtInGadgetManagerClient{cc}
}

func (c *builtInGadgetManagerClient) GetInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/api.BuiltInGadgetManager/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builtInGadgetManagerClient) GetBuiltInGadgetInfo(ctx context.Context, in *GetBuiltInGadgetInfoRequest, opts ...grpc.CallOption) (*GetBuiltInGadgetInfoResponse, error) {
	out := new(GetBuiltInGadgetInfoResponse)
	err := c.cc.Invoke(ctx, "/api.BuiltInGadgetManager/GetBuiltInGadgetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builtInGadgetManagerClient) RunBuiltInGadget(ctx context.Context, opts ...grpc.CallOption) (BuiltInGadgetManager_RunBuiltInGadgetClient, error) {
	stream, err := c.cc.NewStream(ctx, &BuiltInGadgetManager_ServiceDesc.Streams[0], "/api.BuiltInGadgetManager/RunBuiltInGadget", opts...)
	if err != nil {
		return nil, err
	}
	x := &builtInGadgetManagerRunBuiltInGadgetClient{stream}
	return x, nil
}

type BuiltInGadgetManager_RunBuiltInGadgetClient interface {
	Send(*BuiltInGadgetControlRequest) error
	Recv() (*GadgetEvent, error)
	grpc.ClientStream
}

type builtInGadgetManagerRunBuiltInGadgetClient struct {
	grpc.ClientStream
}

func (x *builtInGadgetManagerRunBuiltInGadgetClient) Send(m *BuiltInGadgetControlRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *builtInGadgetManagerRunBuiltInGadgetClient) Recv() (*GadgetEvent, error) {
	m := new(GadgetEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BuiltInGadgetManagerServer is the server API for BuiltInGadgetManager service.
// All implementations must embed UnimplementedBuiltInGadgetManagerServer
// for forward compatibility
type BuiltInGadgetManagerServer interface {
	GetInfo(context.Context, *InfoRequest) (*InfoResponse, error)
	GetBuiltInGadgetInfo(context.Context, *GetBuiltInGadgetInfoRequest) (*GetBuiltInGadgetInfoResponse, error)
	RunBuiltInGadget(BuiltInGadgetManager_RunBuiltInGadgetServer) error
	mustEmbedUnimplementedBuiltInGadgetManagerServer()
}

// UnimplementedBuiltInGadgetManagerServer must be embedded to have forward compatible implementations.
type UnimplementedBuiltInGadgetManagerServer struct {
}

func (UnimplementedBuiltInGadgetManagerServer) GetInfo(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedBuiltInGadgetManagerServer) GetBuiltInGadgetInfo(context.Context, *GetBuiltInGadgetInfoRequest) (*GetBuiltInGadgetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuiltInGadgetInfo not implemented")
}
func (UnimplementedBuiltInGadgetManagerServer) RunBuiltInGadget(BuiltInGadgetManager_RunBuiltInGadgetServer) error {
	return status.Errorf(codes.Unimplemented, "method RunBuiltInGadget not implemented")
}
func (UnimplementedBuiltInGadgetManagerServer) mustEmbedUnimplementedBuiltInGadgetManagerServer() {}

// UnsafeBuiltInGadgetManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuiltInGadgetManagerServer will
// result in compilation errors.
type UnsafeBuiltInGadgetManagerServer interface {
	mustEmbedUnimplementedBuiltInGadgetManagerServer()
}

func RegisterBuiltInGadgetManagerServer(s grpc.ServiceRegistrar, srv BuiltInGadgetManagerServer) {
	s.RegisterService(&BuiltInGadgetManager_ServiceDesc, srv)
}

func _BuiltInGadgetManager_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuiltInGadgetManagerServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BuiltInGadgetManager/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuiltInGadgetManagerServer).GetInfo(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuiltInGadgetManager_GetBuiltInGadgetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuiltInGadgetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuiltInGadgetManagerServer).GetBuiltInGadgetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BuiltInGadgetManager/GetBuiltInGadgetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuiltInGadgetManagerServer).GetBuiltInGadgetInfo(ctx, req.(*GetBuiltInGadgetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuiltInGadgetManager_RunBuiltInGadget_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuiltInGadgetManagerServer).RunBuiltInGadget(&builtInGadgetManagerRunBuiltInGadgetServer{stream})
}

type BuiltInGadgetManager_RunBuiltInGadgetServer interface {
	Send(*GadgetEvent) error
	Recv() (*BuiltInGadgetControlRequest, error)
	grpc.ServerStream
}

type builtInGadgetManagerRunBuiltInGadgetServer struct {
	grpc.ServerStream
}

func (x *builtInGadgetManagerRunBuiltInGadgetServer) Send(m *GadgetEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *builtInGadgetManagerRunBuiltInGadgetServer) Recv() (*BuiltInGadgetControlRequest, error) {
	m := new(BuiltInGadgetControlRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BuiltInGadgetManager_ServiceDesc is the grpc.ServiceDesc for BuiltInGadgetManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuiltInGadgetManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BuiltInGadgetManager",
	HandlerType: (*BuiltInGadgetManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _BuiltInGadgetManager_GetInfo_Handler,
		},
		{
			MethodName: "GetBuiltInGadgetInfo",
			Handler:    _BuiltInGadgetManager_GetBuiltInGadgetInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunBuiltInGadget",
			Handler:       _BuiltInGadgetManager_RunBuiltInGadget_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
